"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Fs = require("fs");
const path = require("path");
const parse_1 = require("./parse");
let instance;
class Properties {
    /**
     *
     * @param file
     */
    constructor(file) {
        this._properties = {};
        this.read(this._properties, file);
    }
    /**
     *
     * @param {string} expression
     * @returns {any}
     */
    static get(expression) {
        return instance.get(expression);
    }
    /**
     *
     * @param {string} expression
     * @returns {any}
     */
    static getValue(expression) {
        return instance.get(expression);
    }
    /**
     * Load file properties from file location or autoload file (set just filename)
     * @param file
     * @param autoload
     * @returns {Properties}
     */
    static initialize(file, autoload) {
        if (!instance) {
            if (file && !autoload) {
                instance = new Properties(file);
            }
            else {
                let propFile = this.findPropertiesFile(file);
                if (propFile) {
                    instance = new Properties(propFile);
                }
            }
        }
        return instance;
    }
    /**
     *
     */
    static clean() {
        instance = undefined;
    }
    /**
     * Find properties.json in the folder, parent folder, etc...
     * @returns {any}
     */
    static findPropertiesFile(file = "properties.json") {
        let folder = process.cwd();
        let current;
        while (!Fs.existsSync(path.join(folder, file)) && current !== folder) {
            current = folder;
            folder = path.resolve(path.join(folder, "/.."));
        }
        if (current === folder) {
            return false;
        }
        return path.join(folder, file);
    }
    /**
     *
     * @param expression
     * @returns {any}
     */
    get(expression) {
        return parse_1.parse(expression, this._properties);
    }
    /**
     *
     * @param node
     * @param file
     */
    read(node, file) {
        file = path.resolve(file);
        if (!Fs.existsSync(file)) {
            throw new Error("Cannot find file properties '" + file + "'");
        }
        let properties = require(file);
        for (let key in properties) {
            if (key === "propertiesFiles") {
                let propertiesFiles = properties[key];
                try {
                    let cwd = path.dirname(file);
                    if (propertiesFiles.cwd) {
                        if (propertiesFiles.cwd.match(/^\./)) {
                            cwd = path.dirname(file) + "/" + propertiesFiles.cwd;
                        }
                        else {
                            cwd = propertiesFiles.cwd;
                        }
                    }
                    this.mount(node, cwd, propertiesFiles.files);
                }
                catch (er) {
                    let message = `${er.message}.\nCheck "propertiesFiles" value in your configuration (${path.resolve(file)}).`;
                    throw new Error(message);
                }
            }
            else {
                node[key] = properties[key];
            }
        }
    }
    /**
     *
     * @param node
     * @param cwd
     * @param propertiesFilesList
     */
    mount(node, cwd, propertiesFilesList) {
        cwd = path.resolve(cwd);
        for (let mountName in propertiesFilesList) {
            let file = propertiesFilesList[mountName];
            let keys = mountName.split("."); // eval expression
            let subNode = node;
            for (let key in keys) {
                subNode[keys[key]] = {};
                subNode = subNode[keys[key]];
            }
            this.read(subNode, cwd + "/" + file);
        }
    }
}
exports.Properties = Properties;
//# sourceMappingURL=Properties.js.map